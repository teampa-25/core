import request from "supertest";
import app from "@/app";
import { StatusCodes } from "http-status-codes";
import { UserService } from "@/services/user.service";
import TestMemory from "./shared";
import Test from "supertest/lib/test";


describe("Authenticate middleware", () => {

  it("should create a new user", async () => {
    const res = await request(app).post("/api/auth/register").send({
      email: "veraBaddie@example.org",
      password: "verabaddie",
    });

    expect(res.statusCode).toBe(StatusCodes.CREATED);

    // instantly delete the newly created user
    const us = new UserService();
    us.delete("veraBaddie@example.org");

  });

  it("should login user and return token", async () => {
    const res = await request(app).post("/api/auth/login").send({
      email: TestMemory.user1.email,
      password: TestMemory.user1.password,
    });

    expect(res.statusCode).toBe(StatusCodes.OK);
    expect(res.body).toHaveProperty("token");
    expect(res.body.token).toBeTruthy();
    expect(typeof res.body.token).toBe("string");
  });

  it("should allow user to perform action (get credits)", async () => {
    let res = await request(app).post("/api/auth/login").send({
      email: TestMemory.user1.email,
      password: TestMemory.user1.password,
    });

    TestMemory.runtime.user1Token = res.body.token;

    res = await request(app)
      .get("/api/user/credits")
      .set("Authorization", `Bearer ${TestMemory.runtime.user1Token}`)
      .send();

    expect(res.statusCode).toBe(StatusCodes.OK);
    expect(res.body).toHaveProperty("credits");
    expect(typeof res.body.credits).toBe("number");
  });

  it("should reject unauthenticated requests", async () => {
    let res = await request(app).get("/api/user/credits").send();
    expect(res.statusCode).toBe(StatusCodes.UNAUTHORIZED);
  });

  it("should reject invalid token", async () => {
    const res = await request(app)
      .get("/api/user/credits")
      .set("Authorization", "Bearer vera_baddie_token");

    expect(res.statusCode).toBe(StatusCodes.UNAUTHORIZED);
  });

  it("should reject invalid password", async () => {
    const res = await request(app).post("/api/auth/login").send({
      email: TestMemory.user1.email,
      password: "vera_baddie_is_not_the_password",
    });
    expect(res.statusCode).toBe(StatusCodes.UNAUTHORIZED);
  });
});
