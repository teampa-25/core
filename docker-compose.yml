services:
  app:
    build: .
    container_name: infernode-app
    ports:
      - "${API_PORT:-3000}:3000"
    env_file: .env
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
      cns:
        condition: service_started
    environment:
      - NODE_ENV=${NODE_ENV}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./src/:/app/src
      - /app/keys
      - ./tsconfig.json:/app/tsconfig.json
      - ./files/:/files
  cns:
    build:
      context: ./cns/
    # uncomment this to enable gpu support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    ports:
      - "${FASTAPI_PORT:-8000}:8000"

    working_dir: /workspace/src
    volumes:
      # Solo la directory cns completa
      - ./cns/:/workspace/

  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT:-6379}:6379"

  postgres:
    image: postgres:latest
    restart: unless-stopped
    container_name: infernode_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file: .env
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
